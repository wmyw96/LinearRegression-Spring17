# generate x data
x = runif(n, min = 0, max = 1)
# set noise
noise = rnorm(n, mean = 0, sd = 0.1)
y = a*x + b + noise
# use a particular method
# Least square estimate (vertical)
sx = sum(x)
sx2 = sum(x * x)
sxy = sum(x * y)
sy = sum(y)
delta = n * sx2 - sx^2
a = (n * sxy - sx * sy) / delta
b = (sx2 * sy - sxy * sx) / delta
lsev = c(a, b)
# Lesat square estimate (horizon)
# analytical solution
u = x - mean(x)
v = y - mean(y)
a = sum(v * v) / sum(v * u)
b = mean(y) - a * mean(x)
lseh = c(a, b)
print(lseh)
# numerical solution
f_lseh = function(par){
a = par[1]
b = par[2]
hd = x - (y - b) / a
return(sum(hd * hd))
}
gr_lseh = function(par){
a = par[1]
b = par[2]
hd = (x - (y - b) / a)
gr_a = 2 * sum(hd * (y - b) / a^2)
gr_b = 2 * sum(hd / a)
return(c(gr_a, gr_b))
}
print(optim(lsev, f_lseh, gr_lseh))
# Least square estimate (perpendicular)
# analytical solution
u = x - mean(x)
v = y - mean(y)
A = sum(u * v)
B = sum(u * u) - sum(v * v)
C = -sum(u * v)
delta = B^2 - 4 * A * C
a1 = (-B + sqrt(delta)) / (2 * A)
b1 = mean(y) - a1 * mean(x)
a2 = (-B - sqrt(delta)) / (2 * A)
b2 = mean(y) - a2 * mean(x)
f = function(a, b){
return(sum((y - a * x - b)^2) / (a^2 + 1))
}
if (f(a1, b1) < f(a2, b2)) a = a1 else a = a2
b = mean(y) - a * mean(x)
lsep = c(a, b)
print(lsep)
# numerical solution
f_lsep = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
return(sum(hd * hd) / (a^2 + 1))
}
gr_lsep = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
ihd = -x - a * y - b
gr_a = sum(hd * ihd) * 2 / (a^2 + 1)^2
gr_b = -2 / (a^2 + 1) * sum(hd)
return(c(gr_a, gr_b))
}
print(optim(lsev, f_lsep, gr_lsep))
# Least Absolute Deviation (vertical)
f_ladv = function(par){
a = par[1]
b = par[2]
hd = (y - a * x - b)
return(sum(abs(hd)))
}
gr_ladv = function(par){
a = par[1]
b = par[2]
hd = (y - a * x - b)
gr_a = ((hd > 0) * (-x)) - ((hd < 0) * (-x))
gr_b = ((hd > 0) * (-1)) - ((hd < 0) * (-1))
return(c(gr_a, gr_b))
}
ladv = optim(lsev, f_ladv, gr_ladv)
print(ladv$par)
# Least Maximum Estimate (vertical)
f_lmev = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
return(max(abs(hd)))
}
gr_lmev = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
i = which.max(abs(hd))
gr_a = (y[i] - a * x[i] - b) * (-x[i])
gr_b = (y[i] - a * x[i] - b) * (-1)
return(c(gr_a, gr_b))
}
lmev = optim(lsev, f_lmev, gr_lmev)
print(lmev$par)
# model:
#   y_i = a x_i + b + e_i
# set true parameter
a = 1
b = 2
# set number of observations
n = 1000
# generate x data
x = runif(n, min = 0, max = 1)
# set noise
noise = rnorm(n, mean = 0, sd = 1)
y = a*x + b + noise
# use a particular method
# Least square estimate (vertical)
sx = sum(x)
sx2 = sum(x * x)
sxy = sum(x * y)
sy = sum(y)
delta = n * sx2 - sx^2
a = (n * sxy - sx * sy) / delta
b = (sx2 * sy - sxy * sx) / delta
lsev = c(a, b)
# Lesat square estimate (horizon)
# analytical solution
u = x - mean(x)
v = y - mean(y)
a = sum(v * v) / sum(v * u)
b = mean(y) - a * mean(x)
lseh = c(a, b)
print(lseh)
# numerical solution
f_lseh = function(par){
a = par[1]
b = par[2]
hd = x - (y - b) / a
return(sum(hd * hd))
}
gr_lseh = function(par){
a = par[1]
b = par[2]
hd = (x - (y - b) / a)
gr_a = 2 * sum(hd * (y - b) / a^2)
gr_b = 2 * sum(hd / a)
return(c(gr_a, gr_b))
}
print(optim(lsev, f_lseh, gr_lseh))
# Least square estimate (perpendicular)
# analytical solution
u = x - mean(x)
v = y - mean(y)
A = sum(u * v)
B = sum(u * u) - sum(v * v)
C = -sum(u * v)
delta = B^2 - 4 * A * C
a1 = (-B + sqrt(delta)) / (2 * A)
b1 = mean(y) - a1 * mean(x)
a2 = (-B - sqrt(delta)) / (2 * A)
b2 = mean(y) - a2 * mean(x)
f = function(a, b){
return(sum((y - a * x - b)^2) / (a^2 + 1))
}
if (f(a1, b1) < f(a2, b2)) a = a1 else a = a2
b = mean(y) - a * mean(x)
lsep = c(a, b)
print(lsep)
# numerical solution
f_lsep = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
return(sum(hd * hd) / (a^2 + 1))
}
gr_lsep = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
ihd = -x - a * y - b
gr_a = sum(hd * ihd) * 2 / (a^2 + 1)^2
gr_b = -2 / (a^2 + 1) * sum(hd)
return(c(gr_a, gr_b))
}
print(optim(lsev, f_lsep, gr_lsep))
# Least Absolute Deviation (vertical)
f_ladv = function(par){
a = par[1]
b = par[2]
hd = (y - a * x - b)
return(sum(abs(hd)))
}
gr_ladv = function(par){
a = par[1]
b = par[2]
hd = (y - a * x - b)
gr_a = ((hd > 0) * (-x)) - ((hd < 0) * (-x))
gr_b = ((hd > 0) * (-1)) - ((hd < 0) * (-1))
return(c(gr_a, gr_b))
}
ladv = optim(lsev, f_ladv, gr_ladv)
print(ladv$par)
# Least Maximum Estimate (vertical)
f_lmev = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
return(max(abs(hd)))
}
gr_lmev = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
i = which.max(abs(hd))
gr_a = (y[i] - a * x[i] - b) * (-x[i])
gr_b = (y[i] - a * x[i] - b) * (-1)
return(c(gr_a, gr_b))
}
lmev = optim(lsev, f_lmev, gr_lmev)
print(lmev$par)
# model:
#   y_i = a x_i + b + e_i
# set true parameter
a = 1
b = 2
# set number of observations
n = 1000
# generate x data
x = runif(n, min = 0, max = 1)
# set noise
noise = rnorm(n, mean = 0, sd = 1)
y = a*x + b + noise
# use a particular method
# Least square estimate (vertical)
sx = sum(x)
sx2 = sum(x * x)
sxy = sum(x * y)
sy = sum(y)
delta = n * sx2 - sx^2
a = (n * sxy - sx * sy) / delta
b = (sx2 * sy - sxy * sx) / delta
lsev = c(a, b)
# Lesat square estimate (horizon)
# analytical solution
u = x - mean(x)
v = y - mean(y)
a = sum(v * v) / sum(v * u)
b = mean(y) - a * mean(x)
lseh = c(a, b)
print(lseh)
# numerical solution
f_lseh = function(par){
a = par[1]
b = par[2]
hd = x - (y - b) / a
return(sum(hd * hd))
}
gr_lseh = function(par){
a = par[1]
b = par[2]
hd = (x - (y - b) / a)
gr_a = 2 * sum(hd * (y - b) / a^2)
gr_b = 2 * sum(hd / a)
return(c(gr_a, gr_b))
}
print(optim(lsev, f_lseh, gr_lseh))
# Least square estimate (perpendicular)
# analytical solution
u = x - mean(x)
v = y - mean(y)
A = sum(u * v)
B = sum(u * u) - sum(v * v)
C = -sum(u * v)
delta = B^2 - 4 * A * C
a1 = (-B + sqrt(delta)) / (2 * A)
b1 = mean(y) - a1 * mean(x)
a2 = (-B - sqrt(delta)) / (2 * A)
b2 = mean(y) - a2 * mean(x)
f = function(a, b){
return(sum((y - a * x - b)^2) / (a^2 + 1))
}
if (f(a1, b1) < f(a2, b2)) a = a1 else a = a2
b = mean(y) - a * mean(x)
lsep = c(a, b)
print(lsep)
# numerical solution
f_lsep = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
return(sum(hd * hd) / (a^2 + 1))
}
gr_lsep = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
ihd = -x - a * y - b
gr_a = sum(hd * ihd) * 2 / (a^2 + 1)^2
gr_b = -2 / (a^2 + 1) * sum(hd)
return(c(gr_a, gr_b))
}
print(optim(lsev, f_lsep, gr_lsep))
# Least Absolute Deviation (vertical)
f_ladv = function(par){
a = par[1]
b = par[2]
hd = (y - a * x - b)
return(sum(abs(hd)))
}
gr_ladv = function(par){
a = par[1]
b = par[2]
hd = (y - a * x - b)
gr_a = ((hd > 0) * (-x)) - ((hd < 0) * (-x))
gr_b = ((hd > 0) * (-1)) - ((hd < 0) * (-1))
return(c(gr_a, gr_b))
}
ladv = optim(lsev, f_ladv, gr_ladv)
print(ladv$par)
# Least Maximum Estimate (vertical)
f_lmev = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
return(max(abs(hd)))
}
gr_lmev = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
i = which.max(abs(hd))
gr_a = (y[i] - a * x[i] - b) * (-x[i])
gr_b = (y[i] - a * x[i] - b) * (-1)
return(c(gr_a, gr_b))
}
lmev = optim(lsev, f_lmev, gr_lmev)
print(lmev$par)
# model:
#   y_i = a x_i + b + e_i
# set true parameter
a = 1
b = 2
# set number of observations
n = 1000
# generate x data
x = runif(n, min = 0, max = 1)
# set noise
noise = rnorm(n, mean = 0, sd = 1)
y = a*x + b + noise
# use a particular method
# Least square estimate (vertical)
sx = sum(x)
sx2 = sum(x * x)
sxy = sum(x * y)
sy = sum(y)
delta = n * sx2 - sx^2
a = (n * sxy - sx * sy) / delta
b = (sx2 * sy - sxy * sx) / delta
lsev = c(a, b)
# Lesat square estimate (horizon)
# analytical solution
u = x - mean(x)
v = y - mean(y)
a = sum(v * v) / sum(v * u)
b = mean(y) - a * mean(x)
lseh = c(a, b)
print(lseh)
# numerical solution
f_lseh = function(par){
a = par[1]
b = par[2]
hd = x - (y - b) / a
return(sum(hd * hd))
}
gr_lseh = function(par){
a = par[1]
b = par[2]
hd = (x - (y - b) / a)
gr_a = 2 * sum(hd * (y - b) / a^2)
gr_b = 2 * sum(hd / a)
return(c(gr_a, gr_b))
}
print(optim(lsev, f_lseh, gr_lseh))
# Least square estimate (perpendicular)
# analytical solution
u = x - mean(x)
v = y - mean(y)
A = sum(u * v)
B = sum(u * u) - sum(v * v)
C = -sum(u * v)
delta = B^2 - 4 * A * C
a1 = (-B + sqrt(delta)) / (2 * A)
b1 = mean(y) - a1 * mean(x)
a2 = (-B - sqrt(delta)) / (2 * A)
b2 = mean(y) - a2 * mean(x)
f = function(a, b){
return(sum((y - a * x - b)^2) / (a^2 + 1))
}
if (f(a1, b1) < f(a2, b2)) a = a1 else a = a2
b = mean(y) - a * mean(x)
lsep = c(a, b)
print(lsep)
# numerical solution
f_lsep = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
return(sum(hd * hd) / (a^2 + 1))
}
gr_lsep = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
ihd = -x - a * y - b
gr_a = sum(hd * ihd) * 2 / (a^2 + 1)^2
gr_b = -2 / (a^2 + 1) * sum(hd)
return(c(gr_a, gr_b))
}
print(optim(lsev, f_lsep, gr_lsep))
# Least Absolute Deviation (vertical)
f_ladv = function(par){
a = par[1]
b = par[2]
hd = (y - a * x - b)
return(sum(abs(hd)))
}
gr_ladv = function(par){
a = par[1]
b = par[2]
hd = (y - a * x - b)
gr_a = ((hd > 0) * (-x)) - ((hd < 0) * (-x))
gr_b = ((hd > 0) * (-1)) - ((hd < 0) * (-1))
return(c(gr_a, gr_b))
}
ladv = optim(lsev, f_ladv, gr_ladv)
print(ladv$par)
# Least Maximum Estimate (vertical)
f_lmev = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
return(max(abs(hd)))
}
gr_lmev = function(par){
a = par[1]
b = par[2]
hd = y - a * x - b
i = which.max(abs(hd))
gr_a = (y[i] - a * x[i] - b) * (-x[i])
gr_b = (y[i] - a * x[i] - b) * (-1)
return(c(gr_a, gr_b))
}
lmev = optim(lsev, f_lmev, gr_lmev)
print(lmev$par)
?pt
pt(-13.193,df=58)
# KNNL51 Power for regression
# only these values need to be changed
n = 60
sig2 = 81
ssx = 8210.983
beta1 = -1
alpha = 0.05
# function of finding power
find_power <- function(n, sig2, ssx, beta1, alpha){
sig2b1 = sig2/ssx
df = n-2
delta = abs(beta1)/sqrt(sig2b1)
tstar = qt(1-alpha/2, df)
power = 1-pt(tstar,df,delta)+pt(-tstar,df,delta);
print(power)
return(power)
}
power = find_power(n, sig2, ssx, beta1, alpha)
beta1 = seq(-2, 2, by=0.05)
power_vec = rep(0, length(beta1))
for( i in 1:length(beta1)){
power_vec[i] = find_power(n, sig2, ssx, beta1[i], alpha)
}
plot(power_vec ~ beta1, type="l", main="Power for the slope in simple linear regression", ylab="Power")
# KNNL51 Power for regression
# only these values need to be changed
n = 32
sig2 = 81
ssx = 4469.21875
beta1 = -1
alpha = 0.05
# function of finding power
find_power <- function(n, sig2, ssx, beta1, alpha){
sig2b1 = sig2/ssx
df = n-2
delta = abs(beta1)/sqrt(sig2b1)
tstar = qt(1-alpha/2, df)
power = 1-pt(tstar,df,delta)+pt(-tstar,df,delta);
print(power)
return(power)
}
power = find_power(n, sig2, ssx, beta1, alpha)
beta1 = seq(-2, 2, by=0.05)
power_vec = rep(0, length(beta1))
for( i in 1:length(beta1)){
power_vec[i] = find_power(n, sig2, ssx, beta1[i], alpha)
}
plot(power_vec ~ beta1, type="l", main="Power for the slope in simple linear regression", ylab="Power")
setwd('Desktop/homework1/code/')
